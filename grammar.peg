// Grammar in traditional PEG

Root <- Spacing Comment* EOF;

// --- STATEMENTS ---

UseStmnt <- KeywordUse ModReference;
ModStmnt <- KeywordMod ModBinding LBrace Stmnt* RBrace;
ValDeclStmnt <- KeywordVal PatExpr Define ValExpr;
TemplateDeclStmnt <- KeywordTemplate LBracket Binding* RBracket PatExpr Define ValExpr;
TypeDeclStmnt <- KeywordType Binding Define TypeExpr;
Stmnt <- Metadata ( UseStmnt / ModStmnt / ValDeclStmnt / TemplateDeclStmnt / TypeDeclStmnt / ValExpr );

// --- PATTERN EXPR ---

PatExpr <- L4PatExpr;

L4PatExpr 
    <- ( L3PatExpr Metadata ( KeywordOr / KeywordAnd ) L4PatExpr)
     / L3PatExpr; 

L3PatExpr  
    <- ( L2PatExpr Metadata ( OpEnum / OpTuple / OpIntersection ) L3PatExpr); 

L2PatExpr 
    <- (L1PatExpr Metadata ( OpRef / OpDeref )
     / L1PatExpr; 

L1PatExpr  
    <- Metadata ( TypeRestrictionPatExpr
                / ValRestrictionPatExpr
                / BlockPatExpr 
                / StructPatExpr
                / MacroExpr );

TypeRestrictionPatExpr
    <- ( Colon TypeExpr) 
     / ( Binding Colon TypeExpr);

ValRestrictionPatExpr 
    <- ( OpsCmp L1ValExpr )
     / ( Binding OpsCmp L1ValExpr);

BlockPatExpr <- LBrace PatExpr RBrace;

StructPatExpr <- KeywordStruct LBrace FieldPatExpr RBrace;

// --- TYPE EXPR ---

TypeExpr <- L3TypeExpr;

L3TypeExpr 
    <- ( L2TypeExpr Metadata ( OpEnum / OpTuple / OpIntersection ) L3TypeExpr) 
     / L2TypeExpr;   

L2TypeExpr 
    <- (L1TypeExpr Metadata ( TypefnCallTypeExprSuffix 
                            / FieldAccessTypeExprSuffix 
                            / OpRef 
                            / OpDeref )
     / L1TypeExpr; 

TypefnCallTypeExprSuffix <- LBracket TypeExpr* RBracket;

FieldAccessTypeExprSuffix <- OpFieldAccess FieldReference;

L1TypeExpr <- Metadata ( FnTypeExpr 
                       / BlockTypeExpr
                       / RefTypeExpr
                       / TypefnTypeExpr
                       / StructTypeExpr
                       / EnumTypeExpr
                       / KeywordNil 
                       / KeywordNever
                       / MacroExpr
                       );

FnTypeExpr <- KeywordFn LParen TypeExpr* RParen TypeExpr;

BlockTypeExpr <- LBrace TypeExpr RBrace;

RefTypeExpr <- Reference; 

TypefnTypeExpr <- KeywordTypefn Binding? LParen Binding* RParen Arrow TypeExpr;

StructTypeExpr <- KeywordStruct LBrace FieldExpr* RBrace;

EnumTypeExpr <- KeywordEnum LBrace FieldExpr* RBrace;

// --- VALUE EXPR ---

ValExpr <- L9ValExpr

L9ValExpr 
     <- ( L8ValExpr Metadata ( OpAssign
                             / OpAddAssign
                             / OpSubAssign
                             / OpMulAssign
                             / OpDivAssign
                             / OpRemAssign 
                             ) L9ValExpr)
     / L8ValExpr; 

L8ValExpr 
    <- ( L7ValExpr Metadata ( KeywordOr / KeywordAnd ) L8ValExpr)
     / L7ValExpr; 

L7ValExpr 
    <- ( L6ValExpr Metadata ( OpEnum / OpTuple / OpIntersection ) L7ValExpr)
     / L6ValExpr; 

L6ValExpr 
     <- (L5ValExpr Metadata OpsCmp L6ValExpr )
      / L5ValExpr; 

L5ValExpr 
    <- (L4ValExpr Metadata ( OpSub / OpAdd ) L5ValExpr)
     / L4ValExpr; 

L4ValExpr 
    <- (L3ValExpr Metadata ( OpMul / OpDiv / OpRem) L4ValExpr)
     / L3ValExpr; 

L3ValExpr 
    <- ( Metadata ( KeywordNot ) L2ValExpr )
     / L2ValExpr; 

L2ValExpr 
    <- ( L1ValExpr Metadata (
         MatchValExprSuffix
       / FieldAccessValExprSuffix
       / FnCallValExprSuffix
       / FnPipeCallValExprSuffix
       / AsValExprSuffix 
       / OpRef
       / OpDeref )
     / L1ValExpr; 

MatchValExprSuffix <- KeywordMatch LBrace MatchCaseExpr* RBrace; 

MatchCaseExpr <- Metadata (MacroExpr / (KeywordPat PatExpr Arrow ValExpr));

FieldAccessValExprSuffix <- OpFieldAccess FieldReference;

FnCallValExprSuffix <- LParen ValExpr* RParen;

FnPipeCallValExprSuffix  <- OpPipe FnCallValExprSuffix;

AsValExprSuffix <- KeywordAs TypeExpr;

L1ValExpr <- Metadata ( FnValExpr 
                      / LoopValExpr 
                      / RetValExpr 
                      / RefValExpr 
                      / BlockValExpr 
                      / KeywordNil 
                      / MacroExpr 
                      / StringLiteral
                      / CharLiteral
                      / IntLiteral
                      / FloatLiteral
                      / StructLiteral
                      );


FnValExpr <- KeywordFn Binding? LParen ( ValExpr )* RParen TypeExpr Yields ValExpr;

LoopValExpr <- KeywordLoop LabelBinding? ValExpr;

RetValExpr <- KeywordRet LabelReference ValExpr;

RefValExpr <- Reference GenericResolutionParams?;

GenericResolutionParams <- LBracket TypeExpr* RBracket;

BlockValExpr <- LBrace LabelBinding? Statement* RBrace;

StructLiteral <- KeywordStruct LBrace FieldLiteralExpr* RBrace;

// --- STRUCT FIELDS ---

FieldReference <- Identifier;
FieldBinding <- Identifier;

FieldLiteralExpr <- Metadata ( (FieldBinding Define ValExpr) / MacroExpr );
FieldExpr <- Metadata ( (FieldBinding Colon TypeExpr) / MacroExpr );
FieldPatExpr <- Metadata ( (FieldReference Arrow PatExpr) / MacroExpr );

// --- COMMENTS + ATTRIBUTES ---

Metadata <- ( Comment / Attribute )*

Comment 
    <- MultilineComment
     / LineComment
     / WordComment;

WordComment
    <- "##" r'[A-Za-z_][A-Za-z0-9_]' Spacing; 

LineComment
    <- "# " r'[^\n]*' Spacing;

NotMultiLineComment 
    <- (!"#{" !"}#" .); 

MultilineComment 
    <- "#{" (NotMultiLineComment / MultilineComment)* "}#" Spacing;

Attribute 
    <- MultilineAttribute
     / LineAttribute
     / WordAttribute;

WordAttribute
    <- "$" r'[^\n]*' Spacing;

LineAttribute
    <- "$$" r'[A-Za-z_][A-Za-z0-9_]' Spacing; 

NotMultiLineAttribute 
    <- (!"${" !"}$" .); 

MultilineAttribute 
    <- "${" (NotMultiLineAttribute / MultilineAttribute)* "}$" Spacing;


// --- MACROS ---

MacroExpr <- MacroIdentifier LParen RParen;

// --- LABELS + REFERENCES ---

Label <- "'" Identifier;

LabelReference <- Label; 
LabelBinding <- Label;

ModBinding <- Identifier;
ModReference <- ( Idenfifier OpModModAccess Spacing )* Identifier;

Reference <- (ModReference OpConcreteModAccess)? Identifier;
Binding <- Identifier;

Identifier <- !AnyKeyword !OpUnderscore r'[A-Za-z_]' r'[A-Za-z0-9_]*' Spacing;
MacroIdentifier <- !OpUnderscore r'[A-Za-z_][A-Za-z0-9_]*"!"' Spacing;

// --- LITERALS ---

hex <- r'[0-9a-fA-F]';
hex_ <- ('_'/hex);
dec <- r'[0-9]';
dec_ <- ('_'/dec);

dec_int <- dec (dec_* dec)?;
hex_int <- hex (hex_* dec)?;

FloatLiteral
    <-  r'[-+]?' "0x" hex_* hex "." hex_int (r'[pP]' r'[-+]?' hex_int)? Spacing
     /  r'[-+]?'      dec_int   "." dec_int (r'[eE]' r'[-+]?' dec_int)? Spacing
     /  r'[-+]?' "0x" hex_* hex "."? r'[pP]' r'[-+]?' hex_int Spacing
     /  r'[-+]?'      dec_int   "."? r'[eE]' r'[-+]?' dec_int Spacing;

IntLiteral
    <- r'[-+]?' "0b" r'[_01]*'  r'[01]'  Spacing
     / r'[-+]?' "0o" [_0-7]* [0-7] Spacing
     / r'[-+]?' "0x" hex_* hex Spacing
     / r'[-+]?'      dec_int   Spacing;

CharUnit
    <- "\\x" hex hex;
     / "\\" r'[nr\\t'"]'
     / r'[^\\'\n]';

CharLiteral <- "'" CharUnit "'" Spacing;

StringUnit
    <- char_escape
     / "\\u{" hex hex hex hex "}"
     / r'[^\\"\n]';

SingleStringLiteral 
    <- "\"" StringUnit* "\"" Spacing;

StringLiteral
    <- SingleStringLiteral SingleStringLiteral*;

// --- Symbols + Operators---

OpModModAccess          <- Slash;
OpDiv                   <- Slash;

OpCmp <- OpEqual 
       / OpNotEqual 
       / OpLessEqual 
       / OpLess 
       / OpGreaterEqual 
       / OpGreater;

OpUnderscore            <- "_"  r'![A-Za-z_]' Spacing;
OpDeref                 <- "@"                Spacing;
OpRef                   <- "&"                Spacing;
OpMul                   <- "*"  r'![=]'       Spacing;
OpMulAssign             <- "*="               Spacing;
Colon                   <- ":"  r'![:=]'      Spacing;
OpConcreteModAccess     <- "::"               Spacing;
OpSemi                  <- ";"                Spacing;
OpTuple                 <- ","                Spacing;
OpFieldAccess           <- "."                Spacing;
OpAssign                <- "="  r'![>=]'      Spacing;
OpEqual                 <- "=="               Spacing;
Define                  <- ":="               Spacing;
Arrow                   <- "=>"               Spacing;
OpNotEqual              <- "!="               Spacing;
OpLess                  <- "<"  r'![=]'       Spacing;
OpLessEqual             <- "<="               Spacing;
LBrace                  <- "{"                Spacing;
LBracket                <- "["  r'![*]'       Spacing;
LParen                  <- "("                Spacing;
OpSub                   <- "-"  r'![=>]'      Spacing;
OpSubAssign             <- "-="               Spacing;
OpPipe                  <- "->"               Spacing;
OpRem                   <- "%"  r'![=]'       Spacing;
OpRemAssign             <- "%="               Spacing;
OpEnum                  <- "|"  r'![|]'       Spacing;
OpIntersection          <- "||"               Spacing;
OpAdd                   <- "+"  r'![+=]'      Spacing;
OpAddAssign             <- "+="               Spacing;
OpGreater               <- ">"  r'![=]'       Spacing;
OpGreaterEqual          <- ">="               Spacing;
RBrace                  <- "}"                Spacing;
RBracket                <- "]"                Spacing;
RParen                  <- ")"                Spacing;
Slash                   <- "/"  r'![=]'       Spacing;
OpDivAssign             <- "/="               Spacing;

// --- KEYWORDS ---

WordEnd <- r'![a-zA-Z0-9_]' Spacing;

KeywordLoop      <- "loop"     WordEnd;
KeywordMatch     <- "match"    WordEnd;
KeywordPat       <- "pat"      WordEnd;
KeywordVal       <- "val"      WordEnd;
KeywordVal       <- "template" WordEnd;
KeywordRet       <- "ret"      WordEnd;
KeywordDefer     <- "defer"    WordEnd;
KeywordFn        <- "fn"       WordEnd;
KeywordPat       <- "pat"      WordEnd;
KeywordAs        <- "as"       WordEnd;
KeywordType      <- "type"     WordEnd;
KeywordTypefn    <- "typefn"   WordEnd;
KeywordStruct    <- "struct"   WordEnd;
KeywordEnum      <- "enum"     WordEnd;
KeywordDyn       <- "dyn"      WordEnd;
KeywordMod       <- "mod"      WordEnd;
KeywordUse       <- "use"      WordEnd;
KeywordTrue      <- "true"     WordEnd;
KeywordFalse     <- "false"    WordEnd;
KeywordAnd       <- "and"      WordEnd;
KeywordOr        <- "or"       WordEnd;
KeywordNot       <- "not"      WordEnd;
KeywordNil       <- "nil"      WordEnd;
KeywordNever     <- "never"    WordEnd;

AnyKeyword <-   
KeywordLoop      \
KeywordMatch     \
KeywordPat       \
KeywordVal       \
KeywordRet       \
KeywordDefer     \
KeywordFn        \
KeywordPat       \
KeywordAs        \
KeywordType      \
KeywordTypefn    \
KeywordStruct    \
KeywordEnum      \
KeywordDyn       \
KeywordMod       \
KeywordUse       \
KeywordTrue      \
KeywordFalse     \
KeywordAnd       \
KeywordOr        \
KeywordNot       \
KeywordNil       \
KeywordNever;     

// --- WHITESPACE ---

Spacing <- r'[ \t\n]*';
