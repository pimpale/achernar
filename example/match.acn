# TODO

# achernar uses ontern matching rather than if's and ternaries
# match is more flexible

# this expression matches on 1
$x = case 1 
  # this on term will match if the expression above evaluates to 1 (it does)
  of 1 -> "it's one"
  # otherwise it would run this one
  # note the use of the _ dummy variable. This variable matches any value and ignores it
  || _ => "not one";

# matches have to be exhaustive
# means that every possible value of the input value has to be matched
# The first matching case is always selected
$y = case 100 
  of -inf..=10  -> "matches if it's less than 10"
  || -inf..=40  -> "matches if it's less than 40"
  || -inf..=50  -> "matches if it's less than 50"
  || -inf..=70  -> "matches if it's less than 70"
  || -inf..=80  -> "matches if it's less than 80"
  || -inf..=100 -> "matches if it's less than 100"
  || -inf..=120 -> "matches if it's less than 120"
  || $_         -> "matches if more than 120";


# not only can you match on inequalities, you can also match on types

$y:File|void = maybeOpenFile();

case y 
  # when put a colon in front of the ontern, you ignore the value of the expression, but force it to be of the type
  of () -> com/io::print("we didn't open the file :( ")
  # you can bind to variable `y` and enforce that `y` has type File
  || $y => (
    # note a block is a valid expression in a match
    com/io::print("we managed to open the file!")
  );

